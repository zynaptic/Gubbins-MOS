/*
 * The Gubbins Microcontroller Operating System
 *
 * Copyright 2023 Zynaptic Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * This header defines the data structures and management functions to
 * be used for general purpose sensor feeds. Sensor feeds provide a high
 * level abstraction for streams of sensor data points generated by
 * arbitrary sensor data sources. Sensor feeds use a 32 bit integer
 * representation of measurement values combined with an 8 bit base 10
 * exponent for scaling.
 */

#ifndef GMOS_SENSOR_FEEDS_H
#define GMOS_SENSOR_FEEDS_H

#include <stdint.h>
#include <stdbool.h>

#include "gmos-config.h"
#include "gmos-scheduler.h"
#include "gmos-streams.h"

/**
 * This configuration option may be used to enable support for sensors
 * that generate vector data, such as three axis accelerometers. When
 * set to zero, vector data support is disabled. Other values may be
 * used to set the maximum number of vector dimensions.
 */
#ifndef GMOS_CONFIG_SENSOR_FEED_MAX_VECTOR_SIZE
#define GMOS_CONFIG_SENSOR_FEED_MAX_VECTOR_SIZE 0
#endif

/**
 * Defines the available sensor meansurement units. In most cases these
 * are the canonical SI units for the values being represented.
 */
typedef enum {

    // This indicates that a sensor measurement is a dimensionless
    // value, such as a ratio value.
    GMOS_SENSOR_UNITS_NONE,

    // This indicates that a sensor measurement is a temperature
    // expressed in units of degrees Celsius.
    GMOS_SENSOR_UNITS_CELSIUS,

    // This indicates that a sensor measurement is a relative humidity
    // measurement expressed as a percentage of the saturation vapour
    // pressure.
    GMOS_SENSOR_UNITS_REL_HUMIDITY

} gmosSensorUnits_t;

/**
 * Defines the data structure used to encapsulate a single sensor feed
 * data point.
 */
typedef struct gmosSensorFeedData_t {

    // The sensor identifier is a unique identifier for the sensor data
    // source. The choice of encoding format will be system specific.
    uint8_t sensorId;

    // The sensor data units field is used to specify the measurement
    // units of the associated value, as given by the gmosSensorUnits_t
    // enumeration.
    uint8_t sensorUnits;

    // The sensor scaling field is used to specify the base 10 exponent
    // to be used when scaling the measurement values.
    int8_t sensorScaling;

    // The vector size is used to specify whether the data is a scalar
    // value or a vector. A value of zero indicates that the data is a
    // scalar value, with all other values indicating a vector of the
    // specified size.
    uint8_t vectorSize;

    // The sensor feed timestamp specifies the value of the GubbinsMOS
    // system timer when the associated data value was submitted to the
    // sensor feed.
    uint32_t timestamp;

    // The data value is represented as a scalar value or a vector of
    // integer values. If required, these can be converted to floating
    // point representations using the specified sensor scaling.
    union {
        int32_t scalar;
        int32_t vector [GMOS_CONFIG_SENSOR_FEED_MAX_VECTOR_SIZE];
    } value;

} gmosSensorFeedData_t;

/**
 * Defines the function prototype used for sensor data filter functions.
 * Filter functions are used to select only those sensor data points
 * which match the requirements of a sensor feed output.
 * @param feedData This is the sensor feed data item which is to be
 *     filtered by the filter function.
 * @return Returns a boolean filter status value which will be set to
 *     'true' if the feed data item is to be forwarded to the associated
 *     feed output for processing and 'false' if it is to be discarded.
 */
typedef bool (*gmosSensorFeedFilter_t) (gmosSensorFeedData_t* feedData);

/**
 * Defines the data structure which is used to hold the state
 * information for a single sensor feed output component.
 */
typedef struct gmosSensorFeedOutput_t {

    // Specifies a pointer to the next output in the sensor feed output
    // list, or a null reference if this is the last entry in the list.
    struct gmosSensorFeedOutput_t* nextOutput;

    // Specifies the sensor data filter function which may be used to
    // select only those sensor data items which match the requirements
    // of the sensor feed output. A null reference indicates that no
    // filter function is to be used.
    gmosSensorFeedFilter_t dataFilter;

    // Instantiates the GubbinsMOS stream which is to be used for
    // forwarding sensor data items to the sensor feed output.
    gmosStream_t outputStream;

} gmosSensorFeedOutput_t;

/**
 * Defines the data structure which is used to hold the state
 * information for a single sensor feed component.
 */
typedef struct gmosSensorFeed_t {

    // Specifies a pointer to the start of the sensor feed output list.
    gmosSensorFeedOutput_t* feedOutputList;

    // Specifies a pointer to the currently selected sensor feed output.
    gmosSensorFeedOutput_t* feedOutput;

    // Instantiates the GubbinsMOS task data structure which is used to
    // hold the task state data for the sensor feed processing task.
    gmosTaskState_t feedTask;

    // Instantiates the GubbinsMOS stream which will be used as a queue
    // for new sensor data items at the sensor feed input.
    gmosStream_t inputStream;

    // Instantiates a sensor feed data item which is used to store the
    // currently selected sensor feed input.
    gmosSensorFeedData_t feedData;

} gmosSensorFeed_t;

/**
 * Initialises a new sensor feed data structure on startup. This should
 * be called once for each sensor feed instance prior to subsequent use.
 * @param sensorFeed This is a pointer to the sensor feed data structure
 *     that is to be initialised.
 * @param maxDataItems This specifies the maximum number of data items
 *     that can be stored in the sensor feed input queue.
 */
void gmosSensorFeedInit (gmosSensorFeed_t* sensorFeed,
    uint16_t maxDataItems);

/**
 * Adds a new output to a given sensor feed. This should be called after
 * the sensor feed has been initialised in order to add sensor feed
 * outputs for sensor data processing.
 * @param sensorFeed This is a pointer to the sensor feed data structure
 *     to which the sensor feed output is to be added.
 * @param sensorFeedOutput This is a pointer to the sensor feed output
 *     data structuure which is to be attached to the sensor feed.
 * @param dataFilter This is an optional data feed filter function which
 *     may be used to select only those sensor feed data items which
 *     match the requirements of the sensor feed output. A null
 *     reference may be used to indicate that no filtering is to be
 *     carried out.
 * @param consumerTask This is a pointer to the GubbinsMOS task data
 *     structure of the task which will process the sensor feed output
 *     data. A null reference may be used to indicate that no consumer
 *     task is specified.
 */
void gmosSensorFeedAddOutput (gmosSensorFeed_t* sensorFeed,
    gmosSensorFeedOutput_t* sensorFeedOutput,
    gmosSensorFeedFilter_t dataFilter,
    gmosTaskState_t* consumerTask);

/**
 * Writes a new scalar value sensor feed data item to a sensor feed,
 * adding it to the sensor feed input queue.
 * @param sensorFeed This is the sensor data feed to which the new
 *     scalar data item is being written.
 * @param sensorId This is the locally unique sensor identifier which
 *     specifies the sensor which was responsible for generating the
 *     data item.
 * @param value This is a scalar value which represents the sampled
 *     sensor data value.
 * @param sensorUnits This specifies the measurement units associated
 *     with the sampled sensor data value, as determined by the
 *     gmosSensorUnits_t enumeration.
 * @param sensorScaling This specifies the sensor measurement scaling,
 *     which is intepreted as a base 10 exponent to be applied to the
 *     sampled value.
 * @return Returns a boolean value which will be set to 'true' if the
 *     new sensor data item was queued at the input of the sensor data
 *     feed and 'false' if the input data queue was full and the sensor
 *     data needs to be resubmitted.
 */
bool gmosSensorFeedWriteScalar (gmosSensorFeed_t* sensorFeed,
    uint8_t sensorId, int32_t value, uint8_t sensorUnits,
    int8_t sensorScaling);

/**
 * Writes a new vector value sensor feed data item to a sensor feed,
 * adding it to the sensor feed input queue.
 * @param sensorFeed This is the sensor data feed to which the new
 *     vector data item is being written.
 * @param sensorId This is the locally unique sensor identifier which
 *     specifies the sensor which was responsible for generating the
 *     data item.
 * @param vector This is a pointer to an array of 32 bit integers which
 *     represent the sampled sensor data value.
 * @param vectorSize This specifies the size of the associated vector
 *     data array, which corresponds to the number of dimensions in the
 *     vector.
 * @param sensorUnits This specifies the measurement units associated
 *     with the sampled sensor data value, as determined by the
 *     gmosSensorUnits_t enumeration.
 * @param sensorScaling This specifies the sensor measurement scaling,
 *     which is intepreted as a base 10 exponent to be applied to the
 *     sampled value.
 * @return Returns a boolean value which will be set to 'true' if the
 *     new sensor data item was queued at the input of the sensor data
 *     feed and 'false' if the input data queue was full and the sensor
 *     data needs to be resubmitted.
 */
bool gmosSensorFeedWriteVector (gmosSensorFeed_t* sensorFeed,
    uint8_t sensorId, int32_t* vector, uint8_t vectorSize,
    uint8_t sensorUnits, int8_t sensorScaling);

/**
 * Reads the next sensor feed data from a sensor feed output, removing
 * it from the associated sensor feed output queue.
 * @param sensorFeedOutput This is a pointer to the sensor feed output
 *     which is being used to read the sensor feed data.
 * @param feedData This is a pointer to the sensor feed data item which
 *     will be populated with the output of the sensor data feed.
 * @return Returns a boolean value which will be set to 'true' if a
 *     sensor data item was removed from the sensor data feed output and
 *     written to the local data structure and 'false' if no sensor data
 *     was available at the sensor data feed output.
 */
bool gmosSensorFeedRead (gmosSensorFeedOutput_t* sensorFeedOutput,
    gmosSensorFeedData_t* feedData);

#endif // GMOS_SENSOR_FEEDS_H
