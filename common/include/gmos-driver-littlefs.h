/*
 * The Gubbins Microcontroller Operating System
 *
 * Copyright 2025 Zynaptic Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * This header defines the API wrapper for the LittleFS filing system,
 * which integrates the standard LittleFS library into the GubbinsMOS
 * runtime framework. The standard LittleFS API is used to access the
 * file system, but all calls can additionally return the LFS_ERR_AGAIN
 * status code in order to indicate that the file system is busy and the
 * request should be retried at a later time.
 */

#ifndef GMOS_DRIVER_LITTLEFS_H
#define GMOS_DRIVER_LITTLEFS_H

#include <stdint.h>
#include <stdbool.h>
#include "gmos-config.h"
#include "gmos-platform.h"
#include "gmos-driver-flash.h"

/**
 * Defines the factory reset file system formatting key value.
 */
#ifndef GMOS_CONFIG_LITTLEFS_FACTORY_RESET_KEY
#define GMOS_CONFIG_LITTLEFS_FACTORY_RESET_KEY 0xF4017A3E
#endif

/**
 * Disables verbose flash memory I/O tracing by default.
 */
#ifndef GMOS_CONFIG_LITTLEFS_LOG_FLASH_IO
#define GMOS_CONFIG_LITTLEFS_LOG_FLASH_IO false
#endif

// Always enable LittleFS thread safe operation. This uses the lock and
// unlock functions to prevent concurrent access to the standard API. If
// a file system operation is already in progress, this will result in a
// return code of LFS_ERR_AGAIN.
#define LFS_THREADSAFE true

// Include the LittleFS headers to get the data structure definitions
// without including the default utility macro settings. The full set of
// utility macros will only be included when building the LittleFS code.
#define LFS_UTIL_H
#include "lfs.h"
#undef LFS_UTIL_H

/**
 * Defines additional error codes generated by the GubbinsMOS runtime.
 */
enum lfs_error_ext {
    LFS_ERR_AGAIN = -11,  // Temporarily unavailable - try again later.
    LFS_ERR_ROFS  = -30   // File system is set to read only.
};

/**
 * Defines the GubbinsMOS LittleFS file system state data structure that
 * is used for managing the file system driver for a single flash memory
 * file system.
 */
typedef struct gmosDriverLittlefs_t {

    // Specifies the flash memory device used by the file system.
    gmosDriverFlash_t* flashDevice;

    // Allocate the main task data structure.
    gmosTaskState_t lfsTask;

    // Allocate the LittleFS file system main data structure.
    lfs_t lfsInstance;

    // Allocate the LittleFS file system configuration data structure.
    struct lfs_config lfsConfig;

    // Specify the timestamp used for periodic garbage collection.
    uint32_t lfsGcTimestamp;

    // Specify interval used for periodic garbage collection.
    uint16_t lfsGcInterval;

    // Specify the current operating state for the file system driver.
    uint8_t lfsState;

    // Specify the locking state for the file system driver.
    uint8_t lfsLocked;

} gmosDriverLittlefs_t;

/**
 * Initialises a LittleFS file system driver on startup. This should be
 * called for each file system prior to accessing it via any of the
 * other API functions.
 * @param littlefs This is the file system driver that is to be
 *     initialised ready for use.
 * @param flashDevice This is the flash memory device data structure
 *     that is to be used by the file system. It should previously have
 *     been initialised ready for use.
 * @param gcInterval This is the periodic garbage collection interval to
 *     be used while the file system is mounted, expressed as an integer
 *     number of seconds. A value of zero will disable periodic garbage
 *     collection.
 * @return Returns a boolean value which will be set to 'true' on
 *     successfully setting up the file system driver and 'false' on
 *     failure.
 */
bool gmosDriverLittlefsInit (gmosDriverLittlefs_t* littlefs,
    gmosDriverFlash_t* flashDevice, uint16_t gcInterval);

/**
 * Formats a LittleFS file system for subsequent use. This function
 * should be used instead of the standard LittleFS API format function.
 * @param littlefs This is the file system driver for which the format
 *     request is being issued.
 * @param factoryResetKey This is the factory reset key which must be
 *     set to the correct key value in order to format the file system.
 * @return Returns a LittleFS status code, which will be set to zero on
 *     successful completion.
 */
int gmosDriverLittlefsFormat (gmosDriverLittlefs_t* littlefs,
    uint32_t factoryResetKey);

/**
 * Mounts a LittleFS file system for subsequent use. This function
 * should be used instead of the standard LittleFS API mount function.
 * @param littlefs This is the file system driver for which the mount
 *     request is being issued.
 * @return Returns a LittleFS status code, which will be set to zero on
 *     successful completion.
 */
int gmosDriverLittlefsMount (gmosDriverLittlefs_t* littlefs);

/**
 * Unmounts a LittleFS file system after use. This function should be
 * used instead of the standard LittleFS unmount function.
 * @param littlefs This is the file system driver for which the unmount
 *     request is being issued.
 * @return Returns a LittleFS status code, which will be set to zero on
 *     successful completion.
 */
int gmosDriverLittlefsUnmount (gmosDriverLittlefs_t* littlefs);

/**
 * Sets the write enable status for the underlying file system flash
 * memory. Flash memory drivers should be assumed to default to read
 * only access on startup.
 * @param littlefs This is the file system driver for which the write
 *     enable status is to be set.
 * @param writeEnable This is a boolean value which should be set to
 *     'true' to allow file system write requests and 'false' to place
 *     the file system in read only mode.
 * @return Returns a LittleFS status code, which will be set to zero on
 *     successful completion.
 */
int gmosDriverLittlefsWriteEnable (gmosDriverLittlefs_t* littlefs,
    bool writeEnable);

/**
 * Access the LittleFS file system instance data structure for use in
 * conjunction with the standard LittleFS API.
 * @param littlefs This is the file system driver for which the LittleFS
 *     file system instance is being requested.
 * @return Returns a pointer to the LittleFS file system instance which
 *     may be used in the standard LittleFS API.
 */
static inline lfs_t* gmosDriverLittlefsGetInstance (
    gmosDriverLittlefs_t* littlefs) {
    return &(littlefs->lfsInstance);
}

#endif // GMOS_DRIVER_LITTLEFS_H
