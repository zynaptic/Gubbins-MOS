/*
 * The Gubbins Microcontroller Operating System
 *
 * Copyright 2025 Zynaptic Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * This header defines the public API for managing MbedTLS local client
 * certificates and associated private keys.
 */

#ifndef GMOS_MBEDTLS_CERTS_H
#define GMOS_MBEDTLS_CERTS_H

#include <stdint.h>
#include <stdbool.h>

#include "gmos-config.h"
#include "gmos-buffers.h"
#include "gmos-driver-eeprom.h"

/**
 * Specify the maximum supported size of DER encoded certificates. This
 * corresponds to the maximum amount of EEPROM memory allocated for
 * storing each DER encoded certificate.
 */
#ifndef GMOS_CONFIG_MBEDTLS_MAX_DER_CERT_SIZE
#define GMOS_CONFIG_MBEDTLS_MAX_DER_CERT_SIZE 680
#endif

/**
 * Specify the maximum supported size of PEM encoded certificates. This
 * is used to specify the size of temporary internal storage for PEM
 * certificate processing.
 */
#ifndef GMOS_CONFIG_MBEDTLS_MAX_PEM_CERT_SIZE
#define GMOS_CONFIG_MBEDTLS_MAX_PEM_CERT_SIZE \
    (((GMOS_CONFIG_MBEDTLS_MAX_DER_CERT_SIZE * 65) / 48) + 56)
#endif

/**
 * Defines the set of key algorithms that are supported for certificate
 * signing. This is a reduced set of key algorithms for use on resource
 * constrained devices.
 */
typedef enum {
    GMOS_MBEDTLS_CERT_KEY_ALG_SEPC256R1
} gmosMbedtlsCertKeyAlg_t;

/**
 * Defines the set of status codes that may be generated by the
 * certificate management functions.
 */
typedef enum {
    GMOS_MBEDTLS_CERT_STATUS_SUCCESS,
    GMOS_MBEDTLS_CERT_STATUS_INVALID_ARGUMENT,
    GMOS_MBEDTLS_CERT_STATUS_BUFFER_TOO_SMALL,
    GMOS_MBEDTLS_CERT_STATUS_INVALID_DATA,
    GMOS_MBEDTLS_CERT_STATUS_NOT_SUPPORTED,
    GMOS_MBEDTLS_CERT_STATUS_NOT_PERMITTED,
    GMOS_MBEDTLS_CERT_STATUS_ALREADY_EXISTS,
    GMOS_MBEDTLS_CERT_STATUS_INVALID_HANDLE,
    GMOS_MBEDTLS_CERT_STATUS_ENTROPY_FAILURE,
    GMOS_MBEDTLS_CERT_STATUS_HSM_COMMS_ERROR,
    GMOS_MBEDTLS_CERT_STATUS_HSM_STORAGE_ERROR,
    GMOS_MBEDTLS_CERT_STATUS_HSM_CORRUPTION,
    GMOS_MBEDTLS_CERT_STATUS_OUT_OF_MEMORY,
    GMOS_MBEDTLS_CERT_STATUS_EEPROM_ACCESS_ERROR,
    GMOS_MBEDTLS_CERT_STATUS_GENERIC_ERROR
} gmosMbedtlsCertStatus_t;

/**
 * Creates a new PSA key pair for subsequent use in MbedTLS client
 * authentication. The key material is kept in private storage and will
 * be protected from external access on devices that support secure key
 * storage.
 * @param keyId This is the unique identifier for the key pair. It
 *     corresponds to the PSA key ID that is used to identify the key
 *     pair in private storage.
 * @param keyAlg This is the cryptographic algorithm to be used in
 *     generating the key pair.
 * @return Returns a certificate status value which indicates successful
 *     key pair creation or the reason for failure.
 */
gmosMbedtlsCertStatus_t gmosMbedtlsCertCreateKeyPair (
    uint32_t keyId, gmosMbedtlsCertKeyAlg_t keyAlg);

/**
 * Destroys a PSA key pair, removing the key material from private
 * storage.
 * @param keyId This is the unique identifier for the key pair. It
 *     corresponds to the PSA key ID that is used to identify the key
 *     pair in private storage.
 * @return Returns a certificate status value which indicates successful
 *     key pair removal or the reason for failure.
 */
gmosMbedtlsCertStatus_t gmosMbedtlsCertDestroyKeyPair (uint32_t keyId);

/**
 * Reads back the public key used for MbedTLS client authentication.
 * @param keyId This is the unique identifier of the key pair for which
 *     the public key is being requested. It corresponds to the PSA key
 *     ID that is used to identify the key pair in private storage.
 * @param keyData This is a pointer to a byte array that on successful
 *     completion will be populated with the requested public key data.
 * @param keyDataSize This is the size of the key data byte array.
 * @param keyMaterialSize This is a pointer to a variable which on
 *     successful completion will be populated with the number of bytes
 *     of key material written to the key data byte array.
 * @return Returns a certificate status value which indicates successful
 *     public key access or the reason for failure.
 */
gmosMbedtlsCertStatus_t gmosMbedtlsCertGetPublicKey (uint32_t keyId,
    uint8_t* keyData, size_t keyDataSize, size_t* keyMaterialSize);

/**
 * Creates a certificate signing request in PEM format. The request is
 * appended as text to the specified GubbinsMOS buffer.
 * @param keyId This is the unique identifier for the key pair that will
 *     be used in the certificate signing request. It corresponds to the
 *     PSA key ID that is used to identify the key pair in private
 *     storage.
 * @param subjectName This is a pointer to a string that will be used as
 *     the subject field in the signing request. It should contain a
 *     comma separated list of X509 OID assignments. For example,
 *     'C=UK,O=ACME,CN=ClientName'.
 * @param csrBuffer This is a pointer to a GubbinsMOS buffer, which on
 *     successful completion will be updated to append the generated
 *     certificate signing request.
 * @return Returns a certificate status value which indicates the
 *     successful generation of a certificate signing request or the
 *     reason for failure.
 */
gmosMbedtlsCertStatus_t gmosMbedtlsCertCreateCsrPem (uint32_t keyId,
    const char *subjectName, gmosBuffer_t* csrBuffer);

/**
 * Converts a PEM encoded certificate to DER format for storage in local
 * EEPROM. The PEM encoded certificate source is stored at the specified
 * offset in the supplied GubbinsMOS buffer.
 * @param eeprom This is a pointer to the EEPROM driver instance that is
 *     to be used for accessing the EEPROM device.
 * @param certEepromTag This is the EEPROM tag that should be used for
 *     identifying the certificate in EEPROM storage.
 * @param certBuffer This is a pointer to the GubbinsMOS buffer that
 *     contains the PEM encoded certificate.
 * @param certBufferOffset This is the offset in the certificate storage
 *     buffer at which the PEM encoded certificate is located.
 * @param padRecord This is a boolean flag, which when set will use an
 *     EEPROM record size that is padded to the maximum supported DER
 *     certificate size. Otherwise the EEPROM record size is assumed to
 *     match the size of the DER encoding. Padding should be used
 *     whenever future certificate updates may potentially change the
 *     certificate size.
 * @param parsedCertSize This is a pointer to a variable that on
 *     successful completion will be updated with the size of the PEM
 *     certificate data that has been processed from the certificate
 *     buffer.
 * @return Returns a certificate status value which indicates the
 *     successful storage of certificate data in EEPROM or the reason
 *     for failure.
 */
gmosMbedtlsCertStatus_t gmosMbedtlsCertStoreCertPem (
    gmosDriverEeprom_t* eeprom, gmosDriverEepromTag_t certEepromTag,
    gmosBuffer_t* certBuffer, uint16_t certBufferOffset,
    bool padRecord, uint16_t* parsedCertSize);

/**
 * Prints the contents of a PEM encoded entity to the serial debug
 * console.
 * @param logLevel This is the GubbinsMOS logging level to be used when
 *     printing out the contents of the PEM data buffer.
 * @param pemBuffer This is a GubbinsMOS buffer which should contain the
 *     PEM encoded certificate or certificate signing request.
 */
void gmosMbedtlsCertPrintPemBuffer (gmosPalLogLevel_t logLevel,
    gmosBuffer_t* pemBuffer);

#endif // GMOS_MBEDTLS_CERTS_H
